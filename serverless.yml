service: raffle-ticket-generator-serverless

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage}
  region: ap-southeast-1
  memorySize: 128
  environment:
    TABLE_ACCOUNTS: ${opt:stage}_ACCOUNTS
    TABLE_PRINT_RECORDS: ${opt:stage}_PRINT_RECORDS 
    STAGE: ${opt:stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:PartiQLSelect
      Resource: "*"

resources:
  Resources:
    CandidatesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - # https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeDefinition.html  
            AttributeName: "id" ## string
            AttributeType: "S"  ## S | N | B
        KeySchema:
          - # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-keyschema.html#aws-properties-dynamodb-keyschema-keytype
            AttributeName: "id" ## string
            KeyType: "HASH" ## HASH | RANGE
        ProvisionedThroughput: # https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification: # https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_StreamSpecification.html
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.TABLE_ACCOUNTS}
    PrintingRecordsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH" 
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.TABLE_PRINT_RECORDS}
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

functions:
  checkAuthorization:
    handler: src/GET.checkAuthorization
    description: Check authorization is valid in client
    name: ${opt:stage}-${self:service}-check-authorization
    events:
      - http: 
          method: get
          path: check-authorization
          cors: true
  loginUser:
    handler: src/POST.loginUser
    description: Check Email & password in server
    name: ${opt:stage}-${self:service}-login-user
    events:
      - http: 
          method: post
          path: login-user
          cors: true
  createUser:
    handler: src/POST.createUser
    description: Create 1 user and save on DB
    name: ${opt:stage}-${self:service}-create-user
    events:
      - http: 
          method: post
          path: create-user
          cors: true
  updateUser:
    handler: src/POST.updateUser
    description: Update details of one user by ID
    name: ${opt:stage}-${self:service}-update-user
    events:
      - http: 
          method: post
          path: update-user
          cors: true
  savePrintingRecod: 
    handler: src/POST.savePrintingRecord
    description: Save 1 printing recod
    name: ${opt:stage}-${self:service}-save-print-record   
    events:
      - http: 
          method: post
          path: save-printing-record
          cors: true
  getPrintRecordsByDateRange:
    handler: src/GET.getPrintRecordsByDateRange
    description: Get Print records by create_at field date range criteria
    name: ${opt:stage}-${self:service}_printsByDaterange
    events:
      - http: 
          method: get
          path: getPrintRecordsByDateRange
          cors: true

plugins:
  - serverless-ignore
      